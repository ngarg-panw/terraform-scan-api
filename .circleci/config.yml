version: 2.1
description: 'This is an inline job'

orbs:
  scan_image:
    jobs:
      scan_job:
        executor: default
        parameters:
          pc_username:
            description: Username for authnetication
            type: string
            #default: techops+provision@redlock.io
          pc_password:
            description: User password for authentication
            type: string
            #default: iYS2ZjfKHyQcQpIg55RP
          pc_host:
            description: host url for getting the token
            type: string
            #default: https://api-skat27e9.castles.prismacloud.io/login
          variable_file_names:
            description: Take the custom variable file names from the user. This is a comma separated list.
            type: string
            default: ""
          directory_path:
            description: If the user wants to give any directory path other than current working directory.
            type: string
            default: .
          high_cve:
            description: High count of vulnerabilities above which the build should fail.
            type: integer
            default: 0
          medium_cve:
            description: Medium count of vulnerabilities above which the build should fail.
            type: integer
            default: 0
          low_cve:
            description: Low count of voluneabilities above which the build should fail.
            type: integer
            default: 0
        steps:
          - checkout
          #- run: zip -r repo.zip . -x ".*"
          - auth:
              pc_username: <<parameters.pc_username>>
              pc_password: <<parameters.pc_password>>
              pc_host: <<parameters.pc_host>>        
          - scan:
              variable_file_names: <<parameters.variable_file_names>>
              directory_path: <<parameters.directory_path>>
              high_cve: <<parameters.high_cve>>
              medium_cve: <<parameters.medium_cve>>
              low_cve: <<parameters.low_cve>>
    commands:
      auth:
        description: API call for authentication. User input will be host, username & password. Response will be the auth token to be passed on in scan command.
        parameters:
          pc_username:
            description: Username for authnetication
            type: string
          pc_password:
            description: User password for authentication
            type: string
          pc_host:
            description: host url for getting the token
            type: string          
        steps:
          - run: 
              command: |
                token=$(curl -X POST <<parameters.pc_host>> -H 'Content-Type:application/json' -d '{"username":"<<parameters.pc_username>>", "password":"<<parameters.pc_password>>"}'|jq .token| tr -d '"') 
                echo "token: " $token
                echo "export AUTH_TOKEN=${token}" >> $BASH_ENV
      scan:
        description: Scan the repo for vulnerabilities in the templates against default and custom rules
        parameters:
          variable_file_names:
            description: Take the custom variable file names from the user. This is a comma separated list.
            type: string
            default: ""
          directory_path:
            description: If the user wants to give any directory path other than current working directory.
            type: string
            default: .
          high_cve:
            description: High count of vulnerabilities above which the build should fail.
            type: integer 
            default: 0
          medium_cve:
            description: Medium count of vulnerabilities above which the build should fail.
            type: integer
            default: 0
          low_cve:
            description: Low count of voluneabilities above which the build should fail.
            type: integer
            default: 0   
        steps:
          - run:
              command: |
                source $BASH_ENV
                echo "AUTH_TOKEN: " ${AUTH_TOKEN}
                SCAN_PATH=<<parameters.directory_path>>
                if [[ -f <<parameters.directory_path>> ]]
                then
                  mkdir scan;
                  cp <<parameters.directory_path>> scan/
                  SCAN_PATH=scan/
                fi
                zip -r repo.zip $SCAN_PATH -x ".*"
                if [[ variable_file_names != "" ]]
                then
                  response=$(curl -X POST https://api-kratcce2.castles.prismacloud.io/iac_scan -H "x-redlock-auth:${AUTH_TOKEN}" -H 'rl-variable-file-names: [<<parameters.variable_file_names>>]' -F templateFile=@repo.zip)
                else
                  response=$(curl -X POST https://api-kratcce2.castles.prismacloud.io/iac_scan -H "x-redlock-auth:${AUTH_TOKEN}" -F templateFile=@repo.zip)
                fi

                echo "response: " $response
                result="$(echo "$response" | jq -r '.result.is_successful')"
                echo "result: " $result

                if [[ $result ]]
                then
                  matched="$(echo "$response" | jq -r '.result.rules_matched')"
                  stats="$(echo "$response" | jq -r '.result.severity_stats')"
                  echo "stats: " $stats
                  mkdir results
                  echo $matched | jq -r '(["SEVERITY","NAME","FILES"] | (., map(length*"-"))), (.[] | [.severity, .name, .files[0]]) |@tsv'> results/scan_results.csv
                  head -n 1 results/scan_results.csv > results/scan.csv && tail -n +2 results/scan_results.csv | sort -t "|" -k 1 >> results/scan.csv
                  #cat results/scan.csv | sed 's/,/ ,/g' | column -t -s, | less -S
                  #cat results/scan.csv | column -t -s, | less -S
                  echo "<html>" ; echo "<body>" ; echo "<table>" ; while read INPUT ; do echo "<tr><td>${INPUT//,/</td><td>}</td></tr>" ; done < results/scan_results.csv ; echo "</table>"; echo "</body>" ; echo "</html>"
                  (echo "<html>" ;
                     echo "<body>" ;
                       echo "<table>" ;
                         while read INPUT ;
                           do
                             echo "<tr><td>${INPUT//,/</td><td>}</td></tr>" ;
                           done < results/scan_results.csv ;
                       echo "</table>";
                     echo "</body>" ;
                   echo "</html>") >results/results.html
                   high="$(echo "$stats" | jq -r '.high')"
                   med="$(echo "$stats" | jq -r '.medium')"
                   low="$(echo "$stats" | jq -r '.low')"
                   if [[ $matched != "" ]]
                   then
                     if [[ ( "$high" -ge <<parameters.high_cve>> )  || ( "$medium" -ge <<parameters.medium_cve>> ) || ( "$low" -ge <<parameters.low_cve>> ) ]]
                     then
                       echo "The build failed because the vulnerability count crossed the threshold values."
                       echo "Statastics: " $stats
                       exit 1;
                     fi
                   fi
                   echo "Build successful. All the vulnerability count parameters are under threshold value."
                   echo "Statastics: \n" $stats
                else
                  echo "$(echo "$response" | jq -r '.result.is_successful')"
                fi  
          - store_artifacts:
              path: results/scan.csv
    executors:
      default:
        machine: true

workflows:  
  build-test-deploy:
    jobs:
      - scan_image/scan_job:
          pc_username: techops+provision@redlock.io
          pc_password: LjXgyP11CsjeF86ZAVps 
          pc_host: https://api-kratcce2.castles.prismacloud.io/login
          directory_path: ./demo/eks.tf.json
